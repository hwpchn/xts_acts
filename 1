/*
 * Copyright (C) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import media from '@ohos.multimedia.media';
import { audio } from '@kit.AudioKit';
import MediaTestBase from './MediaTestBase';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';

export default function AVPlayerTests() {
  describe('AVPlayerTests', () => {
    let mediaTestBase = new MediaTestBase();
    let AVFileDescriptor2: media.AVFileDescriptor;

    // 在所有测试用例前准备文件描述符
    beforeAll(async () => {
      console.info('beforeAll: 准备测试环境');
      await mediaTestBase.getFileDescriptorFromFileDir('H264_AAC_Matedata.mp4', () => {}).then((res) => {
        AVFileDescriptor2 = res;
      });
    });

    // 每个测试用例前等待，确保状态干净
    beforeEach(async () => {
      console.info('beforeEach: 测试用例开始前');
      await mediaTestBase.msleepAsync(1000);
    });

    // 每个测试用例后等待，确保清理完成
    afterEach(async () => {
      console.info('afterEach: 测试用例结束后');
      await mediaTestBase.msleepAsync(1000);
    });

    // 在所有测试用例后关闭文件描述符
    afterAll(async () => {
      console.info('afterAll: 清理测试环境');
      await mediaTestBase.closeFdNumber(AVFileDescriptor2.fd);
    });

    /**
     * @tc.number    : SUB_MULTIMEDIA_AVPLAYER_AUDIO_OUTPUT_DEVICE_CHANGE_0100
     * @tc.name      : 001.测试 audioOutputDeviceChangeWithInfo 事件订阅 - REASON_NEW_DEVICE_AVAILABLE
     * @tc.desc      : 验证订阅 audioOutputDeviceChangeWithInfo 事件并处理 REASON_NEW_DEVICE_AVAILABLE 情况
     * @tc.size      : MediumTest
     * @tc.type      : Function Test
     * @tc.level     : Level0
     */
    it('SUB_MULTIMEDIA_AVPLAYER_AUDIO_OUTPUT_DEVICE_CHANGE_0100', 0, async (done: Function) => {
      console.info('开始测试 audioOutputDeviceChangeWithInfo 事件订阅');

      // 步骤 1: 创建 AVPlayer 实例
      let avPlayer = await media.createAVPlayer();
      console.info('创建 AVPlayer 成功');
      expect(avPlayer).assertDefined(); // 验证 AVPlayer 已定义

      // 步骤 2: 设置媒体源
      avPlayer.fdSrc = AVFileDescriptor2;
      console.info('已设置媒体源为 H264_AAC_Matedata.mp4');

      // 步骤 3: 准备播放器
      await avPlayer.prepare();
      console.info('AVPlayer 已准备好');
      expect(avPlayer.state).assertEqual('prepared'); // 验证状态为 prepared

      // 步骤 4: 订阅 audioOutputDeviceChangeWithInfo 事件
      avPlayer.on('audioOutputDeviceChangeWithInfo', (data: audio.AudioStreamDeviceChangeInfo) => {
        console.info(`音频输出设备变更: reason=${data.changeReason}, devices=${JSON.stringify(data.deviceDescriptors)}`);
        if (data.changeReason === audio.AudioStreamDeviceChangeReason.REASON_NEW_DEVICE_AVAILABLE) {
          console.info('检测到新音频设备可用');
          // 可选：在此处添加应用逻辑，例如切换设备
        }
      });
      console.info('成功订阅 audioOutputDeviceChangeWithInfo 事件');

      // 步骤 5: 开始播放
      await avPlayer.play();
      console.info('AVPlayer 开始播放');
      expect(avPlayer.state).assertEqual('playing'); // 验证状态为 playing

      // 步骤 6: 等待 10 秒以便手动触发事件
      console.info('请在接下来的 10 秒内触发新音频设备可用事件（例如插入耳机）');
      await mediaTestBase.msleepAsync(10000);

      // 步骤 7: 释放播放器
      await avPlayer.release();
      console.info('AVPlayer 已释放');
      expect(avPlayer.state).assertEqual('released'); // 验证状态为 released

      // 测试完成
      done();
    });
  });
}
